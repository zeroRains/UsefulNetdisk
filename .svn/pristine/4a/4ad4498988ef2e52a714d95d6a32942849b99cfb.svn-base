package com.lulinjun.hdfs.controller;

import com.lulinjun.hdfs.model.BaseRespond;
import com.lulinjun.hdfs.model.HDFSFile;
import com.lulinjun.hdfs.service.HDFSService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.List;

@Controller
public class HdfsController {
    @Autowired
    private HDFSService hdfsService;

    @RequestMapping("/tesssssss")
    public String tesssssss(ModelMap modelMap, HttpSession httpSession) throws IOException {
        String user = (String) httpSession.getAttribute("account") + "/";
        List<HDFSFile> res = hdfsService.getDirectoryFromHdfs(user);
        modelMap.put("list", res);
        return "lists";
    }

    @ResponseBody
    @RequestMapping("/list")
    public BaseRespond<HDFSFile> lists(HttpSession httpSession) throws IOException {
        String user = (String) httpSession.getAttribute("account") + "/";
        List<HDFSFile> res = hdfsService.getDirectoryFromHdfs(user);
        return new BaseRespond<>(0, "", res.size(), res);
    }

    @ResponseBody
    @RequestMapping("/lists")
    public BaseRespond<HDFSFile> lists(HttpSession httpSession, @RequestParam("path") String path) throws IOException {
        String user = (String) httpSession.getAttribute("account") + "/" + path + "/";
        List<HDFSFile> res = hdfsService.getDirectoryFromHdfs(user);
        return new BaseRespond<>(0, "", res.size(), res);
    }

    @RequestMapping("/del")
    public String del(String path) {
        hdfsService.deleteFile(path);
        return "redirect:/list";
    }

    @RequestMapping("/addForm")
    public String addForm() {
        return "add";
    }

    @RequestMapping("/modify")
    public String rename(@RequestParam(name = "newName") String newName,
                         @RequestParam(name = "oldName") String oldName,
                         HttpSession session) throws IOException {
        String user = (String) session.getAttribute("account");
        if (hdfsService.moveFile(user + oldName.replace(",", "/"), user + newName.replace(",", "/"))) {
            System.out.println("移动完成");
        } else {
            System.out.println("移动失败");
        }

        return "redirect:/";
    }

    @ResponseBody
    @RequestMapping("/download")
    public String downLoad(@RequestParam("name") String filePath, HttpSession session, HttpServletResponse response) throws IOException {

        String res = "success";
        try {
            //设置相应类型
//            response.setContentType("application/octet-stream;charset=UTF-8");
            /**
             * 设置响应头
             * Content-Disposition属性有两种类型：
             * inline 和 attachment
             * inline ：将文件内容直接显示在页面
             * attachment：弹出对话框让用户选择下载
             */
            filePath = filePath.replaceAll(",", "/");
            String[] filename = filePath.split("/");
            response.setHeader("Content-Disposition", "attachment; filename=" + filename[filename.length - 1] + "");
            filePath = (String) session.getAttribute("account") + filePath;
            //创建出文件流
            InputStream fis = hdfsService.getFileInputStreamForPath(filePath);
            int len = 0;
            byte[] buf = new byte[512];

            //获取response的输出流
            ServletOutputStream outputStream = response.getOutputStream();

            //读取同时，用response的输出流 发送给客户端
            while ((len = fis.read(buf)) != -1) {
                outputStream.write(buf, 0, len);
            }
            //关闭资源
            fis.close();
        } catch (Exception e) {
            res = "fail";
        }
        return res;
        //注意不要跳转
    }

    @ResponseBody
    @RequestMapping(value = "/addFile", method = RequestMethod.POST)
    public BaseRespond<String> addFile(MultipartFile file, @RequestParam("name") String path, HttpSession session) throws IOException {
        BaseRespond<String> res = new BaseRespond<String>(0, "success", 0, null);
        try {
            String originalFileName = file.getOriginalFilename();
            String user = (String) session.getAttribute("account") + path.replaceAll(",", "/");
            File file1 = new File("d:/bigdatatemp/" + originalFileName);
            file.transferTo(file1);
            hdfsService.copyFile(user, file1.getAbsolutePath());
//            System.out.println(originalFileName);
        } catch (Exception e) {
            res.setCode(-1);
            res.setMsg("error");
        }
        return res;
    }
}
